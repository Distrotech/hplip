#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2003-2012 Hewlett-Packard Development Company, L.P.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
#
# Author: Don Welch, Gaurav Sood
#

__version__ = '1.1'
__title__ =  'PostScript Finishing Filter (hpps)'
__doc__ = "CUPS filter that implements job storage (secure printing), Job Accounting and Born On Date (BOD) features on specific capable printers."

# StdLib
import sys
import getopt
import ConfigParser
import os.path
import os
import syslog
import time
import tempfile
import subprocess
import time

CUPS_FILTER_OK = 0
CUPS_FILTER_FAILED = 1 

input_fd = 0
output_fd = 1

job_id = 0
pid = os.getpid()
config_file = '/etc/hp/hplip.conf'
home_dir = ''


def bug(m):
    log.stderr("ERROR: %s" % m)

def msg(m):
    log.stderr("INFO: %s" % m)

if os.path.exists(config_file):
    config = ConfigParser.ConfigParser()
    config.read(config_file)

    try:
        home_dir = config.get('dirs', 'home')
    except:
        bug("Error setting home directory: home= under [dirs] not found.")
        sys.exit(CUPS_FILTER_FAILED)
else:
    bug("Error setting home directory: /etc/hp/hplip.conf not found")
    sys.exit(CUPS_FILTER_FAILED)

if not home_dir or not os.path.exists(home_dir):
    bug("Error setting home directory: Home directory %s not found." % home_dir)
    sys.exit(CUPS_FILTER_FAILED)

sys.path.insert(0, home_dir)
os.chdir(home_dir)


# HPLIP
try:
    from base.g import *
    from base.codes import *
    from base import device
    from base import utils
    from prnt import cups
except ImportError, e:
    bug("Error importing HPLIP modules:%s %s\n" % (pid, e))
    sys.exit(CUPS_FILTER_FAILED)


def usage(typ='text'):
    if typ == 'text':
        utils.log_title(__title__, __version__)

    utils.format_text(USAGE, typ, title=__title__, crumb='pscfilter')
    sys.exit(CUPS_FILTER_OK)


try:
    opts, args = getopt.getopt(sys.argv[1:], 'l:hg', ['level=', 'help', 'help-rest', 'help-man'])
 
except getopt.GetoptError:
    usage()


for o, a in opts:

    if o in ('-l', '--logging'):
        log_level = a.lower().strip()
        log.set_level(log_level)

    elif o == '-g':
        log.set_level('debug')

    elif o in ('-h', '--help'):
        usage()

    elif o == '--help-rest':
        usage('rest')

    elif o == '--help-man':
        usage('man')


# CUPS provided environment
try:
    device_uri = os.environ['DEVICE_URI']
    printer_name = os.environ['PRINTER']
    ppd_file = os.environ['PPD']
except KeyError:
    bug("Improper environment: Must be run by CUPS.")
    sys.exit(CUPS_FILTER_FAILED)



try:
    job_id, username, title, copies, options = args[0:5]
    job_id = int(job_id)
except IndexError:
    bug("Invalid command line: invalid arguments.")
    sys.exit(CUPS_FILTER_FAILED)

START_JOB = "\x1b%-12345X@PJL JOBNAME="
UEL = "@PJL ENTER LANGUAGE=POSTSCRIPT\x0a"
END_JOB = "\x1b%-12345X@PJL EOJ\x0a\x1b%-12345X"



#output_fd = os.open("/var/log/hp/tmp/PSC.out", os.O_WRONLY | os.O_CREAT)


os.write(output_fd, START_JOB)
os.write(output_fd, "hplip_%s_%s\x0a" % (username, job_id))

opts = {}
for opt in options.split():
    try:
        o, v = opt.split('=')
    except ValueError:
        continue
    else:
        opts[o] = v



# --------------------Secure Printing---------------------
# Embeds private job PJL's into the print stream
# ----------------------------------------------------------    
    
if 'HPPin' in options and 'noHPPinPrnt' not in options:
    

    os.write(output_fd, "@PJL SET HOLD=ON\x0a")
    os.write(output_fd, "@PJL SET HOLDTYPE=PRIVATE\x0a")

    secpin = ""
    szKeyInitials = ['HPFIDigit', 'HPSEDigit', 'HPTHDigit', 'HPFTDigit']    # Defined in Printer PPD
    for x in szKeyInitials:
        try:
            secpin = secpin + opts[x]
        except KeyError:
            secpin = secpin + '0'

    os.write(output_fd, '@PJL SET HOLDKEY="%s"\x0a' % secpin)

os.write(output_fd, '@PJL SET USERNAME="%s"\x0a' % username)
os.write(output_fd, '@PJL SET JOBNAME="%s"\x0a' % title)
os.write(output_fd, '@PJL SET COPIES="%s"\x0a' % copies)
    
#----------------Job Accouting----------------------------
# Embeds the job accouting (1-8) PJL's into print stream
# -----------------------------------------------------

try:
    ppd_str = open(ppd_file).read()
except IOError:
    bug("Unabel to read PPD File")
    sys.exit(CUPS_FILTER_FAILED)

key_list = [x for x in ['HPAccountingInfo', 'HPBOD', 'HPPJLEconoMode'] if x in ppd_str]

if 'HPAccountingInfo' in key_list:
    p = subprocess.Popen(['hostname', '-s'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    system_name , err = p.communicate()
    if system_name == '':
        system_name = 'unknown_system_name'
    p = subprocess.Popen(['hostname', '-d'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    domain_name, err = p.communicate() 
    if domain_name == '':
        domain_name = 'unknown_domain_name'

    os.write(output_fd, '@PJL SET JOBATTR=\"JobAcct1=%s\"\x0a' % username)
    os.write(output_fd, '@PJL SET JOBATTR=\"JobAcct2=%s\"\x0a' % system_name.rstrip('\n'))
    os.write(output_fd, '@PJL SET JOBATTR=\"JobAcct3=%s\"\x0a' % domain_name.rstrip('\n'))
    os.write(output_fd, '@PJL SET JOBATTR=\"JobAcct4=%s\"\x0a' % time.strftime("%Y%m%d%I%M%S", time.localtime()))
    os.write(output_fd, '@PJL SET JOBATTR=\"JobAcct5=%s\"\x0a' % opts['job-uuid'])
    os.write(output_fd, '@PJL SET JOBATTR=\"JobAcct6=%s\"\x0a' % "HP Linux Printing")
    os.write(output_fd, '@PJL SET JOBATTR=\"JobAcct7=%s\"\x0a' % "HP Linux Printing")
    os.write(output_fd, '@PJL SET JOBATTR=\"JobAcct8=%s\"\x0a' % username)

# -------------------------Born On Date ----------------------------
# Embeds the born on date PJL's in to print stream. Uses GMT Time Stamp
# Based upon the "BornOnDate_PJL_DMINFO_PJL_TIMESTAMP.doc
# -----------------------------------------------------------------



#----------------------------PJL's for EconoMode in TaiShan-------------------
#-----------------------------------------------------------------------------

if 'HPBOD' in key_list:
    BOD_fixed = "0400040101020D10100115"  # HEX value of the time stamp OID
    BOD_time = time.strftime("%Y%m%d%I%M%S", time.gmtime()) # Timestamp GMT
    BOD_Var = ''  
    for x in BOD_time:
        BOD_Var = BOD_Var + hex(ord(x))[2:]
    os.write(output_fd, '@PJL DMINFO ASCIIHEX=\"%s%s\"\x0A' % (BOD_fixed, BOD_Var))

if 'HPPJLEconoMode' in key_list:
	if 'HPPJLEconoMode' in options and 'noHPPJLEconoMode' not in options:
		os.write(output_fd, "@PJL SET ECONOMODE=ON\x0a")
	else:
		os.write(output_fd, "@PJL SET ECONOMODE=OFF\x0a")
	os.write(output_fd, "@PJL SET RESOLUTION=600\x0a")
	os.write(output_fd, "@PJL SET BITSPERPIXEL=2\x0a")

	
	
os.write(output_fd, UEL)

while True:
    try:
        data = os.read(0, 4096)
    except IOError:
        bug('Unable to read from standart input')
        sys.exit(CUPS_FILTER_FAILED)
    if not data:
        break
    os.write(output_fd, data)

os.write(output_fd, END_JOB)

sys.exit(CUPS_FILTER_OK)
